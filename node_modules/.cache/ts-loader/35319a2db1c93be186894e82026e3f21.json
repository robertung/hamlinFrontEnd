{"remainingRequest":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/babel-loader/lib/index.js!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/ts-loader/index.js??ref--14-2!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/src/store/common.ts","dependencies":[{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/src/store/common.ts","mtime":1602474195727},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCAqIGFzIGxvY2FsRm9yYWdlIGZyb20gJ2xvY2FsZm9yYWdlJzsgLy8gaW1wb3J0IGFwaUNvbnN0YW50cyBmcm9tICcuL2NvbnN0YW50cyc7Cgp2YXIgYXBpRG9tYWluID0gcHJvY2Vzcy5lbnYuQVBJX0RPTUFJTjsKZXhwb3J0IGZ1bmN0aW9uIGFwaVB1dCh1cmwsIGRhdGEpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgbG9jYWxGb3JhZ2UuZ2V0SXRlbSgndXNlclRva2VucycpLnRoZW4oZnVuY3Rpb24gKHVzZXJUb2tlbnMpIHsKICAgICAgdmFyIGFwaVVSTCA9IHJlcGxhY2VBcGlWYXJpYWJsZXModXJsLCB1c2VyVG9rZW5zKTsKICAgICAgdmFyIGRhdGFRUyA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgICBheGlvcyh7CiAgICAgICAgbWV0aG9kOiAnUFVUJywKICAgICAgICB1cmw6ICIiLmNvbmNhdChhcGlEb21haW4sICIvYXBpLyIpLmNvbmNhdChhcGlVUkwpLAogICAgICAgIGRhdGE6IGRhdGFRUywKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHVzZXJUb2tlbnMuYWNjZXNzX3Rva2VuKSwKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIHJlamVjdChlcnJvci5yZXNwb25zZSk7CiAgICAgIH0pOwogICAgfSk7CiAgfSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGFwaVBvc3QodXJsLCBkYXRhKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGxvY2FsRm9yYWdlLmdldEl0ZW0oJ3VzZXJUb2tlbnMnKS50aGVuKGZ1bmN0aW9uICh1c2VyVG9rZW5zKSB7CiAgICAgIHZhciBhcGlVUkwgPSByZXBsYWNlQXBpVmFyaWFibGVzKHVybCwgdXNlclRva2Vucyk7CiAgICAgIHZhciBkYXRhUVMgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgICAgYXhpb3MoewogICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgIHVybDogIiIuY29uY2F0KGFwaURvbWFpbiwgIi9hcGkvIikuY29uY2F0KGFwaVVSTCksCiAgICAgICAgZGF0YTogZGF0YVFTLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodXNlclRva2Vucy5hY2Nlc3NfdG9rZW4pLAogICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgcmVqZWN0KGVycm9yLnJlc3BvbnNlKTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfQpleHBvcnQgZnVuY3Rpb24gYXBpRGVsZXRlKHVybCwgZGF0YSkgewogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBsb2NhbEZvcmFnZS5nZXRJdGVtKCd1c2VyVG9rZW5zJykudGhlbihmdW5jdGlvbiAodXNlclRva2VucykgewogICAgICB2YXIgYXBpVVJMID0gcmVwbGFjZUFwaVZhcmlhYmxlcyh1cmwsIHVzZXJUb2tlbnMpOwogICAgICB2YXIgZGF0YVFTID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICAgIGF4aW9zKHsKICAgICAgICBtZXRob2Q6ICdERUxFVEUnLAogICAgICAgIHVybDogIiIuY29uY2F0KGFwaURvbWFpbiwgIi9hcGkvIikuY29uY2F0KGFwaVVSTCksCiAgICAgICAgZGF0YTogZGF0YVFTLAogICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodXNlclRva2Vucy5hY2Nlc3NfdG9rZW4pLAogICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgcmVqZWN0KGVycm9yLnJlc3BvbnNlKTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfQpleHBvcnQgZnVuY3Rpb24gYXBpR2V0KHVybCwgcGFyYW1zKSB7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGxvY2FsRm9yYWdlLmdldEl0ZW0oJ3VzZXJUb2tlbnMnKS50aGVuKGZ1bmN0aW9uICh1c2VyVG9rZW5zKSB7CiAgICAgIHZhciBhcGlVUkwgPSByZXBsYWNlQXBpVmFyaWFibGVzKHVybCwgdXNlclRva2Vucyk7CiAgICAgIHZhciBkYXRhUVMgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpOwogICAgICBheGlvcyh7CiAgICAgICAgbWV0aG9kOiAnREVMRVRFJywKICAgICAgICB1cmw6ICIiLmNvbmNhdChhcGlEb21haW4sICIvYXBpLyIpLmNvbmNhdChhcGlVUkwpLAogICAgICAgIGRhdGE6IGRhdGFRUywKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICBBdXRob3JpemF0aW9uOiAiQmVhcmVyICIuY29uY2F0KHVzZXJUb2tlbnMuYWNjZXNzX3Rva2VuKSwKICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicKICAgICAgICB9CiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7CiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgIHJlamVjdChlcnJvci5yZXNwb25zZSk7CiAgICAgIH0pOwogICAgfSk7CiAgfSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIGFwaUxvZ2luKHBheWxvYWQpIHsKICB2YXIgZW1haWwgPSBwYXlsb2FkLmVtYWlsOwogIHZhciBwYXNzd29yZCA9IHBheWxvYWQucGFzc3dvcmQ7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGF4aW9zKHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogIiIuY29uY2F0KGFwaURvbWFpbiwgIi9sb2dpbiIpLAogICAgICAvLyB1cmw6IGFwaUNvbnN0YW50cy5iYXNlVVJMICsgJ29hdXRoL3Rva2VuJywKICAgICAgaGVhZGVyczogewogICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcKICAgICAgfSwKICAgICAgZGF0YTogewogICAgICAgIGdyYW50X3R5cGU6ICdwYXNzd29yZCcsCiAgICAgICAgY2xpZW50X2lkOiAndGVzdGNsaWVudCcsCiAgICAgICAgY2xpZW50X3NlY3JldDogJ3Rlc3RwYXNzJywKICAgICAgICBlbWFpbDogZW1haWwsCiAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIHJlc29sdmUocmVzcG9uc2UuZGF0YSk7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgcmVqZWN0KGVycm9yLnJlc3BvbnNlKTsKICAgIH0pOwogIH0pOwp9Ci8qKgogKiBhcGlSZWZyZXNoCiAqCiAqIEBwYXJhbSB7T2JqfSBwYXlsb2FkCiAqIEByZXR1cm5zIHtQcm9taXNlfQogKi8KCmV4cG9ydCBmdW5jdGlvbiBhcGlSZWZyZXNoKHBheWxvYWQpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgYXhpb3MoewogICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgdXJsOiAiIi5jb25jYXQocHJvY2Vzcy5lbnYuQVBJX0JBU0VfVVJMLCAib2F1dGgvdG9rZW4iKSwKICAgICAgZGF0YTogewogICAgICAgIGdyYW50X3R5cGU6IHByb2Nlc3MuZW52Lk9BVVRIX1JFRlJFU0hfR1JBTlRfVFlQRSwKICAgICAgICBjbGllbnRfaWQ6IHByb2Nlc3MuZW52Lk9BVVRIX0NMSUVOVF9JRCwKICAgICAgICBjbGllbnRfc2VjcmV0OiBwcm9jZXNzLmVudi5PQVVUSF9DTElFTlRfU0VDUkVULAogICAgICAgIHJlZnJlc2hfdG9rZW46IHBheWxvYWQucmVmcmVzaFRva2VuCiAgICAgIH0KICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIHJlc29sdmUocmVzcG9uc2UpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIHJlamVjdChlcnJvci5yZXNwb25zZSk7CiAgICB9KTsKICB9KTsKfQoKZnVuY3Rpb24gcmVwbGFjZUFwaVZhcmlhYmxlcyhzdHIsIHVzZXJUb2tlbnMpIHsKICB2YXIgbmV3U3RyaW5nID0gc3RyOwogIHZhciByZSA9IC97KFtefV0rKX0vZzsKICB2YXIgdmFyaWFibGU7IC8vIHdoaWxlICh2YXJpYWJsZSA9IHJlLmV4ZWMoc3RyKSkgewogIC8vIAlpZiAodmFyaWFibGVbMV0udG9Mb3dlckNhc2UoKSA9PSAndXNlcmlkJykgewogIC8vIAkJbmV3U3RyaW5nID0gbmV3U3RyaW5nLnJlcGxhY2UoJ3snICsgdmFyaWFibGVbMV0gKyAnfScsIHVzZXJUb2tlbnMudG9rZW5faWQpOwogIC8vIAl9CiAgLy8gCWlmICh2YXJpYWJsZVsxXS50b0xvd2VyQ2FzZSgpID09ICd0ZWFtaWQnKSB7CiAgLy8gCQluZXdTdHJpbmcgPSBuZXdTdHJpbmcucmVwbGFjZSgneycgKyB2YXJpYWJsZVsxXSArICd9JywgYXBpQ29uc3RhbnRzLnVzZXJJZCk7CiAgLy8gCX0KICAvLyAJaWYgKHZhcmlhYmxlWzFdLnRvTG93ZXJDYXNlKCkgPT0gJ2xhbmd1YWdlSWQnKSB7CiAgLy8gCQluZXdTdHJpbmcgPSBuZXdTdHJpbmcucmVwbGFjZSgneycgKyB2YXJpYWJsZVsxXSArICd9JywgYXBpQ29uc3RhbnRzLmxhbmd1YWdlX2lkKTsKICAvLyAJfQogIC8vIH0KCiAgcmV0dXJuIG5ld1N0cmluZzsKfQovKioKICogSWYgdGhlIFVSTCBpc24ndCBhbHJlYWR5IGZ1bGwgYmFzZSwgcHJlcGVuZCBBUElfQkFTRV9VUkwgYW5kIHJldHVybiBhIGZ1bGwgYmFzZSBVUkwKICoKICogQGF1dGhvciBBcml0aHJhbiBUaHVyYWlyZXRuYW0gPGFyaXRocmFuLnRodXJhaXJldG5hbUBhZHAuY29tPgogKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTAogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KCgpmdW5jdGlvbiBnZXRGdWxsQmFzZVVybCh1cmwpIHsKICB2YXIgcmVnRXhwID0gL15odHRwcz86XC9cLy9pOwogIHJldHVybiByZWdFeHAudGVzdCh1cmwpID8gdXJsIDogYXBpRG9tYWluICsgdXJsOwp9CgpleHBvcnQgZGVmYXVsdCB7CiAgYXBpUHV0OiBhcGlQdXQsCiAgYXBpUG9zdDogYXBpUG9zdCwKICBhcGlEZWxldGU6IGFwaURlbGV0ZSwKICBhcGlHZXQ6IGFwaUdldCwKICBhcGlMb2dpbjogYXBpTG9naW4sCiAgYXBpUmVmcmVzaDogYXBpUmVmcmVzaCwKICByZXBsYWNlQXBpVmFyaWFibGVzOiByZXBsYWNlQXBpVmFyaWFibGVzCn07"},{"version":3,"sources":["/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/eslint-loader/index.js??ref--13-0!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/src/store/common.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as localForage from 'localforage';\n// import apiConstants from './constants';\n\nconst apiDomain = process.env.API_DOMAIN;\n\nexport function apiPut(url: any, data: any) {\n  return new Promise((resolve, reject) => {\n    localForage.getItem('userTokens').then((userTokens: any) => {\n      const apiURL = replaceApiVariables(url, userTokens);\n      const dataQS = JSON.stringify(data);\n      axios({\n        method: 'PUT',\n        url: `${apiDomain}/api/${apiURL}`,\n        data: dataQS,\n        headers: {\n          Authorization: `Bearer ${userTokens.access_token}`,\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((error) => {\n          reject(error.response);\n        });\n    });\n  });\n}\n\nexport function apiPost(url: any, data: any) {\n  return new Promise((resolve, reject) => {\n    localForage.getItem('userTokens').then((userTokens: any) => {\n      const apiURL = replaceApiVariables(url, userTokens);\n      const dataQS = JSON.stringify(data);\n      axios({\n        method: 'POST',\n        url: `${apiDomain}/api/${apiURL}`,\n        data: dataQS,\n        headers: {\n          Authorization: `Bearer ${userTokens.access_token}`,\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((error) => {\n          reject(error.response);\n        });\n    });\n  });\n}\n\nexport function apiDelete(url: any, data: any) {\n  return new Promise((resolve, reject) => {\n    localForage.getItem('userTokens').then((userTokens: any) => {\n      const apiURL = replaceApiVariables(url, userTokens);\n      const dataQS = JSON.stringify(data);\n      axios({\n        method: 'DELETE',\n        url: `${apiDomain}/api/${apiURL}`,\n        data: dataQS,\n        headers: {\n          Authorization: `Bearer ${userTokens.access_token}`,\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((error) => {\n          reject(error.response);\n        });\n    });\n  });\n}\n\nexport function apiGet(url: any, params: any) {\n  return new Promise((resolve, reject) => {\n    localForage.getItem('userTokens').then((userTokens: any) => {\n      const apiURL = replaceApiVariables(url, userTokens);\n      const dataQS = JSON.stringify(params);\n      axios({\n        method: 'DELETE',\n        url: `${apiDomain}/api/${apiURL}`,\n        data: dataQS,\n        headers: {\n          Authorization: `Bearer ${userTokens.access_token}`,\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((error) => {\n          reject(error.response);\n        });\n    });\n  });\n}\n\nexport function apiLogin(payload: any) {\n  const { email } = payload;\n  const { password } = payload;\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'post',\n      url: `${apiDomain}/login`,\n      // url: apiConstants.baseURL + 'oauth/token',\n      headers: {\n        'Content-Type': 'application/json; charset=utf-8',\n      },\n      data: {\n        grant_type: 'password',\n        client_id: 'testclient',\n        client_secret: 'testpass',\n        email,\n        password,\n        // password: btoa(password)\n      },\n    })\n      .then((response) => {\n        resolve(response.data);\n      })\n      .catch((error) => {\n        reject(error.response);\n      });\n  });\n}\n\n/**\n * apiRefresh\n *\n * @param {Obj} payload\n * @returns {Promise}\n */\nexport function apiRefresh(payload: any) {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'post',\n      url: `${process.env.API_BASE_URL}oauth/token`,\n      data: {\n        grant_type: process.env.OAUTH_REFRESH_GRANT_TYPE,\n        client_id: process.env.OAUTH_CLIENT_ID,\n        client_secret: process.env.OAUTH_CLIENT_SECRET,\n        refresh_token: payload.refreshToken,\n      },\n    })\n      .then((response) => {\n        resolve(response);\n      })\n      .catch((error) => {\n        reject(error.response);\n      });\n  });\n}\n\nfunction replaceApiVariables(str: any, userTokens: any) {\n  const newString = str;\n  const re = /{([^}]+)}/g; let\n    variable;\n  // while (variable = re.exec(str)) {\n  // \tif (variable[1].toLowerCase() == 'userid') {\n\n  // \t\tnewString = newString.replace('{' + variable[1] + '}', userTokens.token_id);\n  // \t}\n  // \tif (variable[1].toLowerCase() == 'teamid') {\n  // \t\tnewString = newString.replace('{' + variable[1] + '}', apiConstants.userId);\n  // \t}\n  // \tif (variable[1].toLowerCase() == 'languageId') {\n  // \t\tnewString = newString.replace('{' + variable[1] + '}', apiConstants.language_id);\n  // \t}\n  // }\n  return newString;\n}\n\n/**\n * If the URL isn't already full base, prepend API_BASE_URL and return a full base URL\n *\n * @author Arithran Thurairetnam <arithran.thurairetnam@adp.com>\n * @param {string} url URL\n * @returns {string}\n */\nfunction getFullBaseUrl(url: any) {\n  const regExp = /^https?:\\/\\//i;\n\n  return regExp.test(url) ? url : apiDomain + url;\n}\n\nexport default {\n  apiPut,\n  apiPost,\n  apiDelete,\n  apiGet,\n  apiLogin,\n  apiRefresh,\n  replaceApiVariables,\n};\n"],"sourceRoot":""}]}