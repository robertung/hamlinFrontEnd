{"remainingRequest":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/babel-loader/lib/index.js!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/ts-loader/index.js??ref--13-2!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/src/views/Profile.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/src/views/Profile.vue","mtime":1603071037853},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rothasar/Documents/workspace/hamlinstreethorror/hamlinhorrorstreet-frontend/src/views/Profile.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, Vue } from 'vue-property-decorator';\nimport _ from 'lodash';\n\n@Component\nexport default class Profile extends Vue {\n\n  private files = [];\n\n  private uploadFiles = [];\n\n  private message = '';\n\n  private imgURL = [];\n\n  private yourImages = [];\n\n  private deleteImageId = [];\n\n  private get user() {\n    return this.$store.getters.user;\n  }\n\n  private get getUserId(): boolean {\n    return this.$store.getters.getUserId;\n  }\n\n  private get userImages() {\n    return this.$store.getters.userImage;\n  }\n\n  private selectFile(): void {\n    const { files } = this.$refs.files;\n    this.uploadFiles = [...this.files, ...files];\n\n    this.files = [\n      ...this.files,\n      ..._.map(files, (file) => ({\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        url: URL.createObjectURL(file),\n        invalidMessage: this.validateFile(file),\n      })),\n    ];\n  }\n\n  private validateFile(file): String {\n    const MAX_SIZE = 20000000;\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];\n\n    if (file.size > MAX_SIZE) {\n      return `max size: ${MAX_SIZE / 100}kb`;\n    }\n\n    if (!allowedTypes.includes(file.type)) {\n      return 'Please use only .jpg, .png or .gif file types';\n    }\n\n    return '';\n  }\n\n  private async sendFile(): Promise<void> {\n    const formData = new FormData();\n    this.uploadFiles.userId = this.getUserId;\n    _.forEach(this.uploadFiles, (file) => {\n      if (this.validateFile(file) === '') {\n        formData.append('files', file);\n      }\n    });\n    try {\n      await this.$store.dispatch('upload', formData);\n      this.message = 'Files uploaded';\n      this.files = [];\n      this.uploadFiles = [];\n      this.grabTokenAndUserData();\n    } catch (err) {\n      console.log(err, 'err');\n      this.message = 'Error';\n    }\n  }\n\n  deleteImage(id): void {\n    this.deleteImageId.push(id);\n  }\n\n  async saveDeletedImages(): Promise<void> {\n    const payload = {\n      imageIds: this.deleteImageId,\n      userId: this.getUserId,\n    };\n    await this.$store.dispatch('deleteImages', payload);\n    this.deleteImageId = [];\n  }\n\n  private grabTokenAndUserData(): void {\n    this.$store.dispatch('fetchUserData');\n  }\n\n  private created(): void {\n    this.grabTokenAndUserData();\n  }\n\n  private destroy(): void {\n    this.deleteImageId = [];\n  }\n}\n"],"sourceRoot":""}]}